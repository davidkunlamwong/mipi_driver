/*
 * Copyright (c) 2018-2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#define COLOR_SENSOR   0                /* CCC - imx392.dtsi - color sensor: 0=no, 1=yes */
#if COLOR_SENSOR
  #define PIXEL_TYPE_08  "bayer_rggb8"  /* 8-bit color pixel type  : V4L2_PIX_FMT_SRGGB8  'RGGB'  */
  #define PIXEL_TYPE_10  "bayer_rggb"   /* 10-bit color pixel type : V4L2_PIX_FMT_SRGGB10 'RG10'  */
  #define PIXEL_TYPE_12  "bayer_rggb12" /* 12-bit color pixel type : V4L2_PIX_FMT_SRGGB12 'RG12'  */
#else
  #define PIXEL_TYPE_08  "gray"         /* 8-bit grayscale pixel type  : V4L2_PIX_FMT_GREY 'GREY' */
  #define PIXEL_TYPE_10  "y10"          /* 10-bit grayscale pixel type : V4L2_PIX_FMT_Y10  'Y10 ' */
  #define PIXEL_TYPE_12  "y12"          /* 12-bit grayscale pixel type : V4L2_PIX_FMT_Y12  'Y12 ' */
#endif

#define BUS_WIDTH      2            /* CCC - imx392.dtsi - bus width: 1, 2 or 4 */
#define NUM_LANES     "2"           /* CCC - imx392.dtsi - number of lanes (== bus width): 1, 2 or 4 */
#define FLASH_OUTPUT  "1"           /* CCC - imx392.dtsi - flash output enable: "0"=off, "1"=on */
#define PIX_CLK_HZ_08 "1100000000"   // "800000000"  "400000000"  "182400000"
#define PIX_CLK_HZ_10 "1100000000"   // "800000000"  "400000000"  "182400000"
#define PIX_CLK_HZ_12 "1100000000"   // "800000000"  "400000000"  "182400000"


// #include <dt-bindings/media/camera.h>

// #define CAM0_PWDN     TEGRA194_MAIN_GPIO(P, 4)
// #define CAM1_PWDN     TEGRA194_MAIN_GPIO(P, 5)
// #define CAM_I2C_MUX   TEGRA194_AON_GPIO(CC, 3)

#include <t19x-common-modules/tegra194-camera-e3326-a00.dtsi>
#include "dt-bindings/clock/tegra194-clock.h"

#define CAM0_RST_L  TEGRA194_MAIN_GPIO(H, 3)
#define CAM0_PWDN   TEGRA194_MAIN_GPIO(H, 6)

/*
I2C Busses:

aliases:
i2c0 = "/i2c@3160000";
i2c1 = "/i2c@c240000";
i2c2 = "/i2c@3180000";
i2c3 = "/i2c@3190000";
i2c4 = "/i2c@31a0000";
i2c5 = "/i2c@31b0000";
i2c6 = "/i2c@31c0000";
i2c7 = "/i2c@c250000";
i2c8 = "/i2c@31e0000";
*/

/ {
    host1x {
        vi@15c10000  {
            num-channels = <2>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
                vi_port0: port@0 {
                    reg = <0>;
                    rbpcv2_imx392_vi_in0: endpoint {
                        port-index = <2>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&rbpcv2_imx392_csi_out0>;
                    };
                };
                vi_port1: port@1 {
                    reg = <1>;
                    rbpcv2_imx392_vi_in1: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&rbpcv2_imx392_csi_out1>;
                    };
                };
            };
        };

        nvcsi@15a00000 {
            num-channels = <2>;
            #address-cells = <1>;
            #size-cells = <0>;
            csi_chan0: channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    csi_chan0_port0: port@0 {
                        reg = <0>;
                        rbpcv2_imx392_csi_in0: endpoint@0 {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&rbpcv2_imx392_out0>;
                        };
                    };
                    csi_chan0_port1: port@1 {
                        reg = <1>;
                        rbpcv2_imx392_csi_out0: endpoint@1 {
                            remote-endpoint = <&rbpcv2_imx392_vi_in0>;
                        };
                    };
                };
            };
            csi_chan1: channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    csi_chan1_port0: port@0 {
                        reg = <0>;
                        rbpcv2_imx392_csi_in1: endpoint@2 {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&rbpcv2_imx392_out1>;
                        };
                    };
                    csi_chan1_port1: port@1 {
                        reg = <1>;
                        rbpcv2_imx392_csi_out1: endpoint@3 {
                            remote-endpoint = <&rbpcv2_imx392_vi_in1>;
                        };
                    };
                };
            };
        };
    };

    cam_i2cmux {
        i2c_0:i2c@0 {
            imx392_cam0: rbpcv2_imx392_a@1a {
                compatible = "nvidia,imx392";
                /* I2C device address */
                reg = <0x1a>;

                /* V4L2 device node location */
                devnode = "video0";

                /* Physical dimensions of sensor */
                physical_w = "3.680";
                physical_h = "2.760";

                sensor_model = "imx392";

                use_sensor_mode_id = "false";   // "true";
                flash-output = FLASH_OUTPUT;

                /**
                * ==== Modes ====
                * A modeX node is required to support v4l2 driver
                * implementation with NVIDIA camera software stack
                *
                * == Signal properties ==
                *
                * phy_mode = "";
                * PHY mode used by the MIPI lanes for this device
                *
                * tegra_sinterface = "";
                * CSI Serial interface connected to tegra
                * Incase of virtual HW devices, use virtual
                * For SW emulated devices, use host
                *
                * pix_clk_hz = "";
                * Sensor pixel clock used for calculations like exposure and framerate
                *
                * readout_orientation = "0";
                * Based on camera module orientation.
                * Only change readout_orientation if you specifically
                * Program a different readout order for this mode
                *
                * == Image format Properties ==
                *
                * active_w = "";
                * Pixel active region width
                *
                * active_h = "";
                * Pixel active region height
                *
                * pixel_t = "";
                * The sensor readout pixel pattern
                *
                * line_length = "";
                * Pixel line length (width) for sensor mode.
                *
                * == Source Control Settings ==
                *
                * Gain factor used to convert fixed point integer to float
                * Gain range [min_gain/gain_factor, max_gain/gain_factor]
                * Gain step [step_gain/gain_factor is the smallest step that can be configured]
                * Default gain [Default gain to be initialized for the control.
                *     use min_gain_val as default for optimal results]
                * Framerate factor used to convert fixed point integer to float
                * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
                * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
                * Default Framerate [Default framerate to be initialized for the control.
                *     use max_framerate to get required performance]
                * Exposure factor used to convert fixed point integer to float
                * For convenience use 1 sec = 1000000us as conversion factor
                * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
                * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
                * Default Exposure Time [Default exposure to be initialized for the control.
                *     Set default exposure based on the default_framerate for optimal exposure settings]
                *
                * gain_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_gain_val = ""; (ceil to integer)
                * max_gain_val = ""; (ceil to integer)
                * step_gain_val = ""; (ceil to integer)
                * default_gain = ""; (ceil to integer)
                * Gain limits for mode
                *
                * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_exp_time = ""; (ceil to integer)
                * max_exp_time = ""; (ceil to integer)
                * step_exp_time = ""; (ceil to integer)
                * default_exp_time = ""; (ceil to integer)
                * Exposure Time limits for mode (sec)
                *
                * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_framerate = ""; (ceil to integer)
                * max_framerate = ""; (ceil to integer)
                * step_framerate = ""; (ceil to integer)
                * default_framerate = ""; (ceil to integer)
                * Framerate limits for mode (fps)
                *
                * embedded_metadata_height = "";
                * Sensor embedded metadata height in units of rows.
                * If sensor does not support embedded metadata value should be 0.
                */
                mode0 {     // IMX392_MODE_1920X1200, 120 FPS, 8-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_a";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_08;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_08;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };
                mode1 {     // IMX392_MODE_1920X1200, 120 FPS, 10-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_a";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_10;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_10;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };
                mode2 {     // IMX392_MODE_1920X1200, 120 FPS, 12-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_a";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_12;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_12;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        rbpcv2_imx392_out0: endpoint {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&rbpcv2_imx392_csi_in0>;
                        };
                    };
                };
            };
        };
        i2c_1: i2c@1 {
            imx392_cam1: rbpcv2_imx392_c@1a {
                compatible = "nvidia,imx392";
                /* I2C device address */
                reg = <0x1a>;

                /* V4L2 device node location */
                devnode = "video1";

                /* Physical dimensions of sensor */
                physical_w = "3.680";
                physical_h = "2.760";

                sensor_model = "imx392";

                use_sensor_mode_id = "false";   // "true";
                flash-output = FLASH_OUTPUT;

                /**
                * ==== Modes ====
                * A modeX node is required to support v4l2 driver
                * implementation with NVIDIA camera software stack
                *
                * == Signal properties ==
                *
                * phy_mode = "";
                * PHY mode used by the MIPI lanes for this device
                *
                * tegra_sinterface = "";
                * CSI Serial interface connected to tegra
                * Incase of virtual HW devices, use virtual
                * For SW emulated devices, use host
                *
                * pix_clk_hz = "";
                * Sensor pixel clock used for calculations like exposure and framerate
                *
                * readout_orientation = "0";
                * Based on camera module orientation.
                * Only change readout_orientation if you specifically
                * Program a different readout order for this mode
                *
                * == Image format Properties ==
                *
                * active_w = "";
                * Pixel active region width
                *
                * active_h = "";
                * Pixel active region height
                *
                * pixel_t = "";
                * The sensor readout pixel pattern
                *
                * line_length = "";
                * Pixel line length (width) for sensor mode.
                *
                * == Source Control Settings ==
                *
                * Gain factor used to convert fixed point integer to float
                * Gain range [min_gain/gain_factor, max_gain/gain_factor]
                * Gain step [step_gain/gain_factor is the smallest step that can be configured]
                * Default gain [Default gain to be initialized for the control.
                *     use min_gain_val as default for optimal results]
                * Framerate factor used to convert fixed point integer to float
                * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
                * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
                * Default Framerate [Default framerate to be initialized for the control.
                *     use max_framerate to get required performance]
                * Exposure factor used to convert fixed point integer to float
                * For convenience use 1 sec = 1000000us as conversion factor
                * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
                * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
                * Default Exposure Time [Default exposure to be initialized for the control.
                *     Set default exposure based on the default_framerate for optimal exposure settings]
                *
                * gain_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_gain_val = ""; (ceil to integer)
                * max_gain_val = ""; (ceil to integer)
                * step_gain_val = ""; (ceil to integer)
                * default_gain = ""; (ceil to integer)
                * Gain limits for mode
                *
                * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_exp_time = ""; (ceil to integer)
                * max_exp_time = ""; (ceil to integer)
                * step_exp_time = ""; (ceil to integer)
                * default_exp_time = ""; (ceil to integer)
                * Exposure Time limits for mode (sec)
                *
                * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
                * min_framerate = ""; (ceil to integer)
                * max_framerate = ""; (ceil to integer)
                * step_framerate = ""; (ceil to integer)
                * default_framerate = ""; (ceil to integer)
                * Framerate limits for mode (fps)
                *
                * embedded_metadata_height = "";
                * Sensor embedded metadata height in units of rows.
                * If sensor does not support embedded metadata value should be 0.
                */
                mode0 {     // IMX392_MODE_1920X1200, 120 FPS, 8-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_c";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_08;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_08;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };
                mode1 {     // IMX392_MODE_1920X1200, 120 FPS, 10-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_c";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_10;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_10;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };
                mode2 {     // IMX392_MODE_1920X1200, 120 FPS, 12-bit
                    mclk_khz = "24000";
                    num_lanes = NUM_LANES;
                    tegra_sinterface = "serial_c";
                    phy_mode = "DPHY";
                    discontinuous_clk = "no"; // "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1920";
                    active_h = "1200";
                    pixel_t = PIXEL_TYPE_12;

                    readout_orientation = "90";
                    line_length = "2304";
                    inherent_gain = "1";
                    mclk_multiplier = "9.33";
                    pix_clk_hz = PIX_CLK_HZ_12;  // "182400000";

                    gain_factor = "1";
                    framerate_factor = "1";
                    exposure_factor = "1";
                    min_gain_val = "0";         /* 1.00x */
                    max_gain_val = "1957";      /* 16 DB */
                    step_gain_val = "1";
                    default_gain = "16";        /* 1.00x */
                    min_hdr_ratio = "1";
                    max_hdr_ratio = "1";
                    min_framerate = "10";       /* 10.0 fps */
                    max_framerate = "60";       /* 60.0 fps */
                    step_framerate = "1";
                    default_framerate = "30";   /* 30.0 fps */
                    min_exp_time = "160";       /* us */
                    max_exp_time = "10000000";  /* us */
                    step_exp_time = "1";
                    default_exp_time = "10000"; /* us */

                    embedded_metadata_height = "0";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        rbpcv2_imx392_out1: endpoint {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&rbpcv2_imx392_csi_in1>;
                        };
                    };
                };
            };
        };
    };

    lens_imx392@RBPCV2 {
        min_focus_distance = "0.0";
        hyper_focal = "0.0";
        focal_length = "3.04";
        f_number = "2.0";
        aperture = "0.0";
    };
};

/ {
    tcp: tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";
        /**
        * Physical settings to calculate max ISO BW
        *
        * num_csi_lanes = <>;
        * Total number of CSI lanes when all cameras are active
        *
        * max_lane_speed = <>;
        * Max lane speed in Kbit/s
        *
        * min_bits_per_pixel = <>;
        * Min bits per pixel
        *
        * vi_peak_byte_per_pixel = <>;
        * Max byte per pixel for the VI ISO case
        *
        * vi_bw_margin_pct = <>;
        * Vi bandwidth margin in percentage
        *
        * max_pixel_rate = <>;
        * Max pixel rate in Kpixel/s for the ISP ISO case
        *
        * isp_peak_byte_per_pixel = <>;
        * Max byte per pixel for the ISP ISO case
        *
        * isp_bw_margin_pct = <>;
        * Isp bandwidth margin in percentage
        */
        num_csi_lanes = <4>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <240000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;

        /**
         * The general guideline for naming badge_info contains 3 parts, and is as follows,
         * The first part is the camera_board_id for the module; if the module is in a FFD
         * platform, then use the platform name for this part.
         * The second part contains the position of the module, ex. "rear" or "front".
         * The third part contains the last 6 characters of a part number which is found
         * in the module's specsheet from the vendor.
         */
        modules {
            cam_module0: module0 {
                badge = "e3326_front_P5V27C";
                position = "rear";
                orientation = "1";
                cam_module0_drivernode0: drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "imx392 2-001a";
                    proc-device-tree = "/proc/device-tree/i2c@3180000/rbpcv2_imx392_a@1a";
                };
                cam_module0_drivernode1: drivernode1 {
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/e3326_lens_imx392@P5V27C/";
                };
            };
            cam_module1: module1 {
                badge = "e3326_front_P5V27C";
                position = "front";
                orientation = "1";
                cam_module1_drivernode0: drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "imx392 1-001a";
                    proc-device-tree = "/proc/device-tree/i2c@c240000/rbpcv2_imx392_c@1a";
                };
                cam_module1_drivernode1: drivernode1 {
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/e3326_lens_imx392@P5V27C/";
                };
            };
        };
    };
};

/ {
    cam_i2cmux{
        compatible = "i2c-mux-gpio";
        #address-cells = <1>;
        #size-cells = <0>;
        i2c-parent = <&cam_i2c>;
        mux-gpios = <&tegra_aon_gpio CAM_I2C_MUX GPIO_ACTIVE_HIGH>;
        i2c@0 {
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;
            rbpcv2_imx392_a@1a {
                reset-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
        i2c@1 {
            reg = <1>;
            #address-cells = <1>;
            #size-cells = <0>;
            rbpcv2_imx392_c@1a {
                reset-gpios = <&tegra_main_gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
    };

    gpio@2200000 {
        camera-control-output-low {
            gpio-hog;
            output-low;
            // gpios = <CAM0_PWDN 0 CAM1_PWDN 0>;
            // label = "cam0-pwdn","cam1-pwdn";
            gpios = <CAM0_RST_L 0 CAM0_PWDN 0>;
            label = "cam0-rst", "cam0-pwdn";
        };
    };
};
