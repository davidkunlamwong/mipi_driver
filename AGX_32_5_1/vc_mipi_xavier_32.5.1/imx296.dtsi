/*
 * Copyright (c) 2015-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <t19x-common-modules/tegra194-camera-e3326-a00.dtsi>
#include "dt-bindings/clock/tegra194-clock.h"

#define CAM0_RST_L  TEGRA194_MAIN_GPIO(H, 3)
#define CAM0_PWDN   TEGRA194_MAIN_GPIO(H, 6)

/*
I2C Busses:

aliases:
i2c0 = "/i2c@3160000";
i2c1 = "/i2c@c240000";
i2c2 = "/i2c@3180000";
i2c3 = "/i2c@3190000";
i2c4 = "/i2c@31a0000";
i2c5 = "/i2c@31b0000";
i2c6 = "/i2c@31c0000";
i2c7 = "/i2c@c250000";
i2c8 = "/i2c@31e0000";
*/

/ {

/* camera control gpio definitions */
    gpio@2200000 {
        camera-control-output-low {
            gpio-hog;
            output-low;
            gpios = <CAM0_RST_L 0 CAM0_PWDN 0>;
            label = "cam0-rst", "cam0-pwdn";
        };
    };

    host1x {
        vi@15c10000 {
            num-channels = <2>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
                port@0 {
                    reg = <0>;
                    imx296_vi_in0: endpoint {
                        port-index = <2>;       // CSI-C ?? CSI-2
                        bus-width = <1>;        // # of lanes
                        remote-endpoint = <&imx296_csi_out0>;
                    };
                };
                port@1 {
                    reg = <1>;
                    imx296_vi_in1: endpoint {
                        port-index = <4>;       // CSI-C ?? CSI-3
                        bus-width = <1>;        // # of lanes
                        remote-endpoint = <&imx296_csi_out1>;
                    };
                };
            };
        };

        nvcsi@15a00000 {
            num-channels = <2>;
            #address-cells = <1>;
            #size-cells = <0>;
            channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        imx296_csi_in0: endpoint@0 {
                            port-index = <2>;
                            bus-width = <1>;
                            remote-endpoint = <&imx296_out0>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        imx296_csi_out0: endpoint@1 {
                            remote-endpoint = <&imx296_vi_in0>;
                        };
                    };
                };
            };
            channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        imx296_csi_in1: endpoint@2 {
                            port-index = <4>;
                            bus-width = <1>;
                            remote-endpoint = <&imx296_out1>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        imx296_csi_out1: endpoint@3 {
                            remote-endpoint = <&imx296_vi_in1>;
                        };
                    };
                };
            };
        };
    };

    i2c@3180000 {
        imx296_c@1a {
            compatible = "nvidia,imx296";
            /* I2C device address */
            reg = <0x1a>;
            fpga_addr = "0x10";

            /* V4L2 device node location */
            devnode = "video0";

            /* Physical dimensions of sensor */
            physical_w = "3.674";
            physical_h = "2.738";

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            /* mclk-index indicates the index of the */
            /* mclk-name with in the clock-names array */

            clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
                     <&bpmp_clks TEGRA194_CLK_PLLP_OUT0>;
            clock-names = "extperiph1", "pllp_grtba";
            clock-frequency = <24000000>;
            mclk = "extperiph1";
            reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
            pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            vana-supply = <&p2822_avdd_cam_2v8>;
            vif-supply = <&p2822_vdd_1v8_cvb>;
//            vdig-supply = <&p2822_vdd_sys_en>;

            avdd-reg = "vana";
            iovdd-reg = "vif";

            /* Sensor output flip settings */
            vertical-flip = "true";
            flash-output = "0";

            /**
            * A modeX node is required to support v4l2 driver
            * implementation with NVIDIA camera software stack
            *
            * mclk_khz = "";
            * Standard MIPI driving clock, typically 24MHz
            *
            * num_lanes = "";
            * Number of lane channels sensor is programmed to output
            *
            * tegra_sinterface = "";
            * The base tegra serial interface lanes are connected to
            * Incase of virtual HW devices, use virtual
            * For SW emulated devices, use host
            *
            * phy_mode = "";
            * PHY mode used by the MIPI lanes for this device
            *
            * discontinuous_clk = "";
            * The sensor is programmed to use a discontinuous clock on MIPI lanes
            *
            * dpcm_enable = "true";
            * The sensor is programmed to use a DPCM modes
            *
            * cil_settletime = "";
            * MIPI lane settle time value.
            * A "0" value attempts to autocalibrate based on mclk_multiplier
            *
            *
            *
            *
            * active_w = "";
            * Pixel active region width
            *
            * active_h = "";
            * Pixel active region height
            *
            * pixel_t = "";
            * The sensor readout pixel pattern
            *
            * readout_orientation = "0";
            * Based on camera module orientation.
            * Only change readout_orientation if you specifically
            * Program a different readout order for this mode
            *
            * line_length = "";
            * Pixel line length (width) for sensor mode.
            * This is used to calibrate features in our camera stack.
            *
            * mclk_multiplier = "";
            * Multiplier to MCLK to help time hardware capture sequence
            * TODO: Assign to PLL_Multiplier as well until fixed in core
            *
            * pix_clk_hz = "";
            * Sensor pixel clock used for calculations like exposure and framerate
            *
            *
            *
            *
            * inherent_gain = "";
            * Gain obtained inherently from mode (ie. pixel binning)
            *
            * == Source Control Settings ==
            *
            * Gain factor used to convert fixed point integer to float
            * Gain range [min_gain/gain_factor, max_gain/gain_factor]
            * Gain step [step_gain/gain_factor is the smallest step that can be configured]
            * Default gain [Default gain to be initialized for the control.
            *     use min_gain_val as default for optimal results]
            * Framerate factor used to convert fixed point integer to float
            * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
            * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
            * Default Framerate [Default framerate to be initialized for the control.
            *     use max_framerate to get required performance]
            * Exposure factor used to convert fixed point integer to float
            * For convenience use 1 sec = 1000000us as conversion factor
            * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
            * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
            * Default Exposure Time [Default exposure to be initialized for the control.
            *     Set default exposure based on the default_framerate for optimal exposure settings]
            *
            * gain_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_gain_val = ""; (ceil to integer)
            * max_gain_val = ""; (ceil to integer)
            * step_gain_val = ""; (ceil to integer)
            * default_gain = ""; (ceil to integer)
            * Gain limits for mode
            *
            * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_exp_time = ""; (ceil to integer)
            * max_exp_time = ""; (ceil to integer)
            * step_exp_time = ""; (ceil to integer)
            * default_exp_time = ""; (ceil to integer)
            * Exposure Time limits for mode (us)
            *
            *
            * min_hdr_ratio = "";
            * max_hdr_ratio = "";
            * HDR Ratio limits for mode
            *
            * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_framerate = "";
            * max_framerate = "";
            * step_framerate = ""; (ceil to integer)
            * default_framerate = ""; (ceil to integer)
            * Framerate limits for mode (fps)
            */
            mode0 {   // IMX296_MODE_1440X1080, 60 FPS
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                phy_mode = "DPHY";
                discontinuous_clk = "no"; // "yes";  // ???
                dpcm_enable = "false";
                cil_settletime = "0";

                active_w = "1440";          // +++
                active_h = "1080";          // +++
                pixel_t = "y10";                // V4L2_PIX_FMT_Y10     'Y10 '
//                pixel_t = "bayer_rggb";       // V4L2_PIX_FMT_SRGGB10 'RG10'

                csi_pixel_bit_depth = "10";

                readout_orientation = "0";
                line_length = "1568";  // "2688";
                inherent_gain = "1";
                mclk_multiplier = "6.67";

//                pix_clk_hz = "93312000";        // 1440 * 1080 * 60 = 93312000
//                pix_clk_hz = "160000000";
//                pix_clk_hz = "320000000";
              pix_clk_hz = "400000000";


                gain_factor = "10";
                min_gain_val = "0";    /* 1DB*/
                max_gain_val = "480";  /* 16DB*/
                step_gain_val = "1";
                default_gain = "0";
                min_hdr_ratio = "1";
                max_hdr_ratio = "1";
                framerate_factor = "1000000";
                min_framerate = "10000000";    /* 10. FPS */
                max_framerate = "60000000";    /* 60. FPS */
                step_framerate = "1";
                default_framerate = "30000000";  /* 30. FPS */
                exposure_factor = "1000000";
                min_exp_time = "29";        /* us */
                max_exp_time = "15110711";  /* us */
                step_exp_time = "1";
                default_exp_time = "2000"; /* us */
                embedded_metadata_height = "2";  // "1", "2"  ???
            };

            mode1 {   // IMX297_MODE_720X540, 120 FPS
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                phy_mode = "DPHY";
                discontinuous_clk = "no"; // "yes";  // ???
                dpcm_enable = "false";
                cil_settletime = "0";

                active_w = "704";           // +++
                active_h = "540";           // +++
                pixel_t = "y10";                // V4L2_PIX_FMT_Y10 "Y10"
//                pixel_t = "bayer_rggb";       // V4L2_PIX_FMT_SRGGB10 "RG10"

                csi_pixel_bit_depth = "10";

                readout_orientation = "0";
                line_length = "720"; // "1568";  // "2688";
                inherent_gain = "1";
                mclk_multiplier = "6.67";

//                pix_clk_hz = "93312000";        // 1440 * 1080 * 60 = 93312000
//                pix_clk_hz = "160000000";
//                pix_clk_hz = "320000000";
              pix_clk_hz = "200000000";

                gain_factor = "10";
                min_gain_val = "0";    /* 1DB*/
                max_gain_val = "480";  /* 16DB*/
                step_gain_val = "1";
                default_gain = "0";
                min_hdr_ratio = "1";
                max_hdr_ratio = "1";
                framerate_factor = "1000000";
                min_framerate = "10000000";    /* 10. FPS */
                max_framerate = "120000000";   /* 120. FPS */
                step_framerate = "1";
                default_framerate = "30000000";  /* 30. FPS */
                exposure_factor = "1000000";
                min_exp_time = "29";        /* us */
                max_exp_time = "15110711";  /* us */
                step_exp_time = "1";
                default_exp_time = "2000"; /* us */
                embedded_metadata_height = "2";  // "1", "2"  ???
            };

//            mode1 { // OV9281_MODE_1280X800, 30 FPS, GRAY8 format
//                mclk_khz = "24000";
//                num_lanes = "1";
//                tegra_sinterface = "serial_c";
//                phy_mode = "DPHY";
//                discontinuous_clk = "yes";   // ??? "no"
//                dpcm_enable = "false";
//                cil_settletime = "0";
//
//                active_w = "1280";
//                active_h = "800";
//                pixel_t = "gray";             // V4L2_PIX_FMT_GREY    "GREY"
//                csi_pixel_bit_depth = "8";    // ??? "10"
//                readout_orientation = "0";
//                line_length = "1408";  // "2688";
//                inherent_gain = "1";
//                mclk_multiplier = "6.67";
//                pix_clk_hz = "160000000";
//
//                gain_factor = "10";
//                min_gain_val = "0";    /* 1DB*/
//                max_gain_val = "254";  /* 16DB*/
//                step_gain_val = "1";
//                default_gain = "16";
//                min_hdr_ratio = "1";
//                max_hdr_ratio = "1";
//                framerate_factor = "1000000";
//                min_framerate = "10000000";    /* 10. FPS  */
//                max_framerate = "120000000";  /* 120. FPS */
//                step_framerate = "1";
//                default_framerate = "30000000"; /* 30. FPS */
//                exposure_factor = "1000000";
//                min_exp_time = "8";         /* us */
//                max_exp_time = "7719";      /* us */
//                step_exp_time = "1";
//                default_exp_time = "2233";  /* us */
//                embedded_metadata_height = "0";
//            };


            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    imx296_out0: endpoint {
                        port-index = <2>;
                        bus-width = <1>;
                        remote-endpoint = <&imx296_csi_in0>;
                    };
                };
            };
        };
    };
//        imx296_c@10 {
//            compatible = "dummy";
//            reg = <0x10>;
//            status = "disabled";
//        };

    i2c@c240000 {
        imx296_a@1a {
            compatible = "nvidia,imx296";
            /* I2C device address */
            reg = <0x1a>;
            fpga_addr = "0x10";

            /* V4L2 device node location */
            devnode = "video1";

            /* Physical dimensions of sensor */
            physical_w = "3.674";
            physical_h = "2.738";

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            /* mclk-index indicates the index of the */
            /* mclk-name with in the clock-names array */

            clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
                     <&bpmp_clks TEGRA194_CLK_PLLP_OUT0>;
            clock-names = "extperiph1", "pllp_grtba";
            clock-frequency = <24000000>;
            mclk = "extperiph1";
            reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
            pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            vana-supply = <&p2822_avdd_cam_2v8>;
            vif-supply = <&p2822_vdd_1v8_cvb>;
//            vdig-supply = <&p2822_vdd_sys_en>;

            avdd-reg = "vana";
            iovdd-reg = "vif";

            /* Sensor output flip settings */
            vertical-flip = "true";
            flash-output = "0";

            /**
            * A modeX node is required to support v4l2 driver
            * implementation with NVIDIA camera software stack
            *
            * mclk_khz = "";
            * Standard MIPI driving clock, typically 24MHz
            *
            * num_lanes = "";
            * Number of lane channels sensor is programmed to output
            *
            * tegra_sinterface = "";
            * The base tegra serial interface lanes are connected to
            * Incase of virtual HW devices, use virtual
            * For SW emulated devices, use host
            *
            * phy_mode = "";
            * PHY mode used by the MIPI lanes for this device
            *
            * discontinuous_clk = "";
            * The sensor is programmed to use a discontinuous clock on MIPI lanes
            *
            * dpcm_enable = "true";
            * The sensor is programmed to use a DPCM modes
            *
            * cil_settletime = "";
            * MIPI lane settle time value.
            * A "0" value attempts to autocalibrate based on mclk_multiplier
            *
            *
            *
            *
            * active_w = "";
            * Pixel active region width
            *
            * active_h = "";
            * Pixel active region height
            *
            * pixel_t = "";
            * The sensor readout pixel pattern
            *
            * readout_orientation = "0";
            * Based on camera module orientation.
            * Only change readout_orientation if you specifically
            * Program a different readout order for this mode
            *
            * line_length = "";
            * Pixel line length (width) for sensor mode.
            * This is used to calibrate features in our camera stack.
            *
            * mclk_multiplier = "";
            * Multiplier to MCLK to help time hardware capture sequence
            * TODO: Assign to PLL_Multiplier as well until fixed in core
            *
            * pix_clk_hz = "";
            * Sensor pixel clock used for calculations like exposure and framerate
            *
            *
            *
            *
            * inherent_gain = "";
            * Gain obtained inherently from mode (ie. pixel binning)
            *
            * == Source Control Settings ==
            *
            * Gain factor used to convert fixed point integer to float
            * Gain range [min_gain/gain_factor, max_gain/gain_factor]
            * Gain step [step_gain/gain_factor is the smallest step that can be configured]
            * Default gain [Default gain to be initialized for the control.
            *     use min_gain_val as default for optimal results]
            * Framerate factor used to convert fixed point integer to float
            * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
            * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
            * Default Framerate [Default framerate to be initialized for the control.
            *     use max_framerate to get required performance]
            * Exposure factor used to convert fixed point integer to float
            * For convenience use 1 sec = 1000000us as conversion factor
            * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
            * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
            * Default Exposure Time [Default exposure to be initialized for the control.
            *     Set default exposure based on the default_framerate for optimal exposure settings]
            *
            * gain_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_gain_val = ""; (ceil to integer)
            * max_gain_val = ""; (ceil to integer)
            * step_gain_val = ""; (ceil to integer)
            * default_gain = ""; (ceil to integer)
            * Gain limits for mode
            *
            * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_exp_time = ""; (ceil to integer)
            * max_exp_time = ""; (ceil to integer)
            * step_exp_time = ""; (ceil to integer)
            * default_exp_time = ""; (ceil to integer)
            * Exposure Time limits for mode (us)
            *
            *
            * min_hdr_ratio = "";
            * max_hdr_ratio = "";
            * HDR Ratio limits for mode
            *
            * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
            * min_framerate = "";
            * max_framerate = "";
            * step_framerate = ""; (ceil to integer)
            * default_framerate = ""; (ceil to integer)
            * Framerate limits for mode (fps)
            */
            mode0 {   // IMX296_MODE_1440X1080, 60 FPS
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                phy_mode = "DPHY";
                discontinuous_clk = "no"; // "yes";  // ???
                dpcm_enable = "false";
                cil_settletime = "0";

                active_w = "1440";          // +++
                active_h = "1080";          // +++
                pixel_t = "y10";                // V4L2_PIX_FMT_Y10     'Y10 '
//                pixel_t = "bayer_rggb";       // V4L2_PIX_FMT_SRGGB10 'RG10'

                csi_pixel_bit_depth = "10";

                readout_orientation = "0";
                line_length = "1568";  // "2688";
                inherent_gain = "1";
                mclk_multiplier = "6.67";

//                pix_clk_hz = "93312000";        // 1440 * 1080 * 60 = 93312000
//                pix_clk_hz = "160000000";
//                pix_clk_hz = "320000000";
              pix_clk_hz = "400000000";


                gain_factor = "10";
                min_gain_val = "0";    /* 1DB*/
                max_gain_val = "480";  /* 16DB*/
                step_gain_val = "1";
                default_gain = "0";
                min_hdr_ratio = "1";
                max_hdr_ratio = "1";
                framerate_factor = "1000000";
                min_framerate = "10000000";    /* 10. FPS */
                max_framerate = "60000000";    /* 60. FPS */
                step_framerate = "1";
                default_framerate = "30000000";  /* 30. FPS */
                exposure_factor = "1000000";
                min_exp_time = "29";        /* us */
                max_exp_time = "15110711";  /* us */
                step_exp_time = "1";
                default_exp_time = "2000"; /* us */
                embedded_metadata_height = "2";  // "1", "2"  ???
            };

            mode1 {   // IMX297_MODE_720X540, 120 FPS
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                phy_mode = "DPHY";
                discontinuous_clk = "no"; // "yes";  // ???
                dpcm_enable = "false";
                cil_settletime = "0";

                active_w = "704";           // +++
                active_h = "540";           // +++
                pixel_t = "y10";                // V4L2_PIX_FMT_Y10 "Y10"
//                pixel_t = "bayer_rggb";       // V4L2_PIX_FMT_SRGGB10 "RG10"

                csi_pixel_bit_depth = "10";

                readout_orientation = "0";
                line_length = "720"; // "1568";  // "2688";
                inherent_gain = "1";
                mclk_multiplier = "6.67";

//                pix_clk_hz = "93312000";        // 1440 * 1080 * 60 = 93312000
//                pix_clk_hz = "160000000";
//                pix_clk_hz = "320000000";
              pix_clk_hz = "200000000";

                gain_factor = "10";
                min_gain_val = "0";    /* 1DB*/
                max_gain_val = "480";  /* 16DB*/
                step_gain_val = "1";
                default_gain = "0";
                min_hdr_ratio = "1";
                max_hdr_ratio = "1";
                framerate_factor = "1000000";
                min_framerate = "10000000";    /* 10. FPS */
                max_framerate = "120000000";   /* 120. FPS */
                step_framerate = "1";
                default_framerate = "30000000";  /* 30. FPS */
                exposure_factor = "1000000";
                min_exp_time = "29";        /* us */
                max_exp_time = "15110711";  /* us */
                step_exp_time = "1";
                default_exp_time = "2000"; /* us */
                embedded_metadata_height = "2";  // "1", "2"  ???
            };

//            mode1 { // OV9281_MODE_1280X800, 30 FPS, GRAY8 format
//                mclk_khz = "24000";
//                num_lanes = "1";
//                tegra_sinterface = "serial_c";
//                phy_mode = "DPHY";
//                discontinuous_clk = "yes";   // ??? "no"
//                dpcm_enable = "false";
//                cil_settletime = "0";
//
//                active_w = "1280";
//                active_h = "800";
//                pixel_t = "gray";             // V4L2_PIX_FMT_GREY    "GREY"
//                csi_pixel_bit_depth = "8";    // ??? "10"
//                readout_orientation = "0";
//                line_length = "1408";  // "2688";
//                inherent_gain = "1";
//                mclk_multiplier = "6.67";
//                pix_clk_hz = "160000000";
//
//                gain_factor = "10";
//                min_gain_val = "0";    /* 1DB*/
//                max_gain_val = "254";  /* 16DB*/
//                step_gain_val = "1";
//                default_gain = "16";
//                min_hdr_ratio = "1";
//                max_hdr_ratio = "1";
//                framerate_factor = "1000000";
//                min_framerate = "10000000";    /* 10. FPS  */
//                max_framerate = "120000000";  /* 120. FPS */
//                step_framerate = "1";
//                default_framerate = "30000000"; /* 30. FPS */
//                exposure_factor = "1000000";
//                min_exp_time = "8";         /* us */
//                max_exp_time = "7719";      /* us */
//                step_exp_time = "1";
//                default_exp_time = "2233";  /* us */
//                embedded_metadata_height = "0";
//            };


            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    imx296_out1: endpoint {
                        port-index = <4>;
                        bus-width = <1>;
                        remote-endpoint = <&imx296_csi_in1>;
                    };
                };
            };
        };
    };

    tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";
        /**
        * Physical settings to calculate max ISO BW
        *
        * num_csi_lanes = <>;
        * Total number of CSI lanes when all cameras are active
        *
        * max_lane_speed = <>;
        * Max lane speed in Kbit/s
        *
        * min_bits_per_pixel = <>;
        * Min bits per pixel
        *
        * vi_peak_byte_per_pixel = <>;
        * Max byte per pixel for the VI ISO case
        *
        * vi_bw_margin_pct = <>;
        * Vi bandwidth margin in percentage
        *
        * max_pixel_rate = <>;
        * Max pixel rate in Kpixel/s for the ISP ISO case
        *
        * isp_peak_byte_per_pixel = <>;
        * Max byte per pixel for the ISP ISO case
        *
        * isp_bw_margin_pct = <>;
        * Isp bandwidth margin in percentage
        */
        num_csi_lanes = <2>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
//        min_bits_per_pixel = <8>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <160000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;

        /**
        * The general guideline for naming badge_info contains 3 parts, and is as follows,
        * The first part is the camera_board_id for the module; if the module is in a FFD
        * platform, then use the platform name for this part.
        * The second part contains the position of the module, ex. “rear” or “front”.
        * The third part contains the last 6 characters of a part number which is found
        * in the module's specsheet from the vender.
        */
        modules {
            module0 {
                badge = "e3326_front_P5V27C";
                position = "rear";
                orientation = "1";
                drivernode0 {
                    pcl_id = "v4l2_sensor";      /* Declare PCL support driver (classically known as guid)  */
                    devname = "imx296 2-001a";  /* Driver v4l2 device name */
                    /* Declare the device-tree hierarchy to driver instance */
                    proc-device-tree = "/proc/device-tree/i2c@3180000/imx296_c@1a";
                };

//                drivernode1 {
//                    /* Declare PCL support driver (classically known as guid)  */
//                    pcl_id = "v4l2_lens";
//                    proc-device-tree = "/proc/device-tree/e3326_lens_imx296@P5V27C/";
//                };

            };
            module1 {
                badge = "e3326_front_P5V27C";
                position = "front";
                orientation = "1";
                drivernode0 {
                    pcl_id = "v4l2_sensor";      /* Declare PCL support driver (classically known as guid)  */
                    devname = "imx296 1-001a";  /* Driver v4l2 device name */
                    /* Declare the device-tree hierarchy to driver instance */
                    proc-device-tree = "/proc/device-tree/i2c@c240000/imx296_a@1a";
                };
            };
        };
    };
};
